group 'com.knewjade'
version '0.431'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

archivesBaseName = 'solution-finder'
sourceCompatibility = 1.8

// Specify encoding of sources
def defaultEncoding = 'UTF-8'

tasks.withType(AbstractCompile).each {
    it.options.encoding = defaultEncoding
}

tasks.withType(GroovyCompile).each {
    it.groovyOptions.encoding = defaultEncoding
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-RC2'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.+'
    testCompile 'com.google.guava:guava:21.0'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M5'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M5'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.0.0-M5'

    // for assertions
    testCompile 'org.assertj:assertj-core:3.+'

    // for IDE runner
    testRuntime 'org.junit.platform:junit-platform-launcher:1.0.0-M5'
}

jar {
    manifest.attributes 'Main-Class': 'Main'
    from configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it)
    }
}

def releaseDir = file 'release'
def distributionDir = file 'distribution'

task cleanReleaseDir(type: Task) {
    group = 'release'

    doLast {
        delete releaseDir
        releaseDir.mkdir()
    }
}

task copyRelease(type: Task) {
    group = 'release'

    doLast {
        // copy distribution
        copy {
            from distributionDir
            into releaseDir
            exclude '**/.*'
        }

        def jarName = String.format '%s-%s.jar', archivesBaseName, version
        def srcJarFile = file libsDir.canonicalPath + File.separator + jarName

        // copy jar
        copy {
            from srcJarFile
            into releaseDir
            rename { file -> 'sfinder.jar' }
        }

        // copy README
        def readmeName = distributionDir.canonicalPath + File.separator + "README.md"
        copy {
            from readmeName
            into "."
        }
    }
}

task release(type: Zip) {
    group = 'release'

    // dependency
    dependsOn jar, cleanReleaseDir, copyRelease
    copyRelease.mustRunAfter jar, cleanReleaseDir

    from releaseDir
}

// gradle run -Pargs="arg1 args2 ..."
run {
    mainClassName = 'Main'
    if (project.hasProperty('args')) {
        String str = project.args
        def list = Arrays.asList str.split('\\s+')
        mainClassName = list[0]
        if (1 < list.size())
            args = list[1..(list.size() - 1)]  // set args in run task
    }
}

junitPlatform {
    filters {
        tags {
            exclude 'long'
        }
    }
}